<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LightRAG on YuChen</title><link>https://Dandelionlibra.github.io/tags/lightrag/</link><description>Recent content in LightRAG on YuChen</description><generator>Hugo -- gohugo.io</generator><language>zh-Hant-TW</language><lastBuildDate>Wed, 06 Aug 2025 09:03:00 +0800</lastBuildDate><atom:link href="https://Dandelionlibra.github.io/tags/lightrag/index.xml" rel="self" type="application/rss+xml"/><item><title>LightRAG Server 檔案儲存基本介紹</title><link>https://Dandelionlibra.github.io/post/note/lightrag-json-db/</link><pubDate>Wed, 06 Aug 2025 09:03:00 +0800</pubDate><guid>https://Dandelionlibra.github.io/post/note/lightrag-json-db/</guid><description>&lt;h1 id="lightrag-api-server-教學快速上手指南">LightRAG API Server 教學：快速上手指南
&lt;/h1>&lt;p>&lt;a class="link" href="https://github.com/HKUDS/LightRAG" target="_blank" rel="noopener"
>LightRAG&lt;/a> 是一個輕量級、模組化的 RAG（檢索增強生成）框架，旨在簡化 RAG 應用的開發與部署。其內建的 API Server 遵循 OpenAI API 標準，並提供一套完整的 Web UI API 來管理文件與知識圖譜，讓開發者能輕易地將自訂的 RAG 流程封裝成服務，並與現有生態系無縫接軌。本文將引導初學者完成從環境設定到 API 呼叫的完整流程。&lt;/p>
&lt;hr>
&lt;h1 id="lightrag-支援的儲存類型">LightRAG 支援的儲存類型
&lt;/h1>&lt;ul>
&lt;li>KV_STORAGE：llm 回應快取、文字區塊、文件訊息&lt;/li>
&lt;li>VECTOR_STORAGE：實體向量、關係向量、區塊向量&lt;/li>
&lt;li>GRAPH_STORAGE：實體關係圖&lt;/li>
&lt;li>DOC_STATUS_STORAGE：文檔索引狀態&lt;/li>
&lt;/ul>
&lt;h2 id="1-kv_store_doc_statusjson">1. kv_store_doc_status.json
&lt;/h2>&lt;p>功能：紀錄每份文件在知識庫中的處理狀態與相關資訊。&lt;/p>
&lt;p>&lt;strong>主要欄位&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>__id__&lt;/code>：文件的唯一識別碼。&lt;/li>
&lt;li>&lt;code>file_path&lt;/code>：原始文件檔名或路徑。&lt;/li>
&lt;li>&lt;code>status&lt;/code>：處理狀態（如：processed, pending, error）。&lt;/li>
&lt;li>&lt;code>updated_at&lt;/code>：最後更新時間。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>用途&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>監控文件是否已完成切割、嵌入與存入向量資料庫。&lt;/li>
&lt;li>方便追蹤與除錯。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-kv_store_full_docsjson">2. kv_store_full_docs.json
&lt;/h2>&lt;p>功能：儲存完整的原始文檔，作為語義檢索的來源。&lt;/p>
&lt;p>&lt;strong>主要欄位&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>__id__&lt;/code>：文件唯一 ID。&lt;/li>
&lt;li>&lt;code>file_path&lt;/code>：檔案來源路徑。&lt;/li>
&lt;li>&lt;code>content&lt;/code>：完整文件的文字內容。&lt;/li>
&lt;li>&lt;code>metadata&lt;/code>：附屬資訊（如標題、作者、分類）。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>用途&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>保留完整語境，便於 LLM 在回答時回溯全文。&lt;/li>
&lt;li>提供「非分塊」的全文檢索。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-kv_store_llm_response_cachejson">3. kv_store_llm_response_cache.json
&lt;/h2>&lt;p>功能：作為 LLM 查詢結果的快取，避免重複計算。&lt;/p>
&lt;p>&lt;strong>主要欄位&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>query&lt;/code>：使用者輸入的查詢字串。&lt;/li>
&lt;li>&lt;code>response&lt;/code>：LLM 生成的回答。&lt;/li>
&lt;li>&lt;code>timestamp&lt;/code>：快取生成時間。&lt;/li>
&lt;li>&lt;code>hit_count&lt;/code>：該查詢被重複使用的次數。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>用途&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>提升系統效能，減少模型重複推理。&lt;/li>
&lt;li>允許分析熱門查詢。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="4-kv_store_text_chunksjson">4. kv_store_text_chunks.json
&lt;/h2>&lt;p>功能：儲存將文件切割後的小片段（chunks），方便向量檢索。&lt;/p>
&lt;p>&lt;strong>主要欄位&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>__id__&lt;/code>：文本片段 ID。&lt;/li>
&lt;li>&lt;code>file_path&lt;/code>：來源文件名稱。&lt;/li>
&lt;li>&lt;code>chunk_index&lt;/code>：片段順序號。&lt;/li>
&lt;li>&lt;code>content&lt;/code>：片段內容文字。&lt;/li>
&lt;li>&lt;code>embedding_vector&lt;/code>（可選）：對應的向量嵌入。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>用途&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>支援語意檢索（RAG: Retrieval-Augmented Generation）。&lt;/li>
&lt;li>每個 chunk 對應一組 embedding，利於近似搜尋。&lt;/li>
&lt;/ul>
&lt;p>存有 token 數。&lt;/p>
&lt;hr>
&lt;h2 id="vdb_chunksjson">vdb_chunks.json
&lt;/h2>&lt;p>功能：儲存經嵌入處理的文本向量（Vector DB 核心）。&lt;/p>
&lt;p>&lt;strong>主要欄位&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>__id__&lt;/code>：chunk 的唯一識別碼。&lt;/li>
&lt;li>&lt;code>embedding_dim&lt;/code>：向量維度（如 1024）。&lt;/li>
&lt;li>&lt;code>embedding_vector&lt;/code>：嵌入向量。&lt;/li>
&lt;li>&lt;code>content&lt;/code>：對應文本。&lt;/li>
&lt;li>&lt;code>source_id&lt;/code>：來源 chunk 的 ID。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>用途&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>提供高效相似度搜尋。&lt;/li>
&lt;li>是 RAG 系統的核心檢索資料來源。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="vdb_entitiesjson">vdb_entities.json
&lt;/h2>&lt;p>功能：儲存從文本中抽取的命名實體與相關描述。&lt;/p>
&lt;p>&lt;strong>主要欄位&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>__id__&lt;/code>：實體 ID。&lt;/li>
&lt;li>&lt;code>entity_name&lt;/code>：實體名稱（如「林致远」「阿墨」）。&lt;/li>
&lt;li>&lt;code>content&lt;/code>：實體的描述或定義。&lt;/li>
&lt;li>&lt;code>file_path&lt;/code>：來源檔案。&lt;/li>
&lt;li>&lt;code>source_id&lt;/code>：對應文本片段 ID。&lt;/li>
&lt;li>&lt;code>__created_at__&lt;/code>：建立時間戳。&lt;/li>
&lt;li>&lt;code>embedding_dim&lt;/code>：嵌入向量維度（如 1024）。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>特色&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>一個實體可能來自多個文本片段，用 &lt;!-- raw HTML omitted --> 分隔。&lt;/li>
&lt;li>可支援多語言或多版本（如 知一书屋 vs 知一書屋）。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>用途&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>為知識圖譜中的節點（entities）。&lt;/li>
&lt;li>支援語義關聯檢索與上下文補全。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="vdb_relationshipsjson">vdb_relationships.json
&lt;/h2>&lt;p>功能：儲存實體之間的語義關係，形成知識圖譜 (Knowledge Graph)。&lt;/p>
&lt;p>&lt;strong>主要欄位&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>__id__&lt;/code>：關係 ID。&lt;/li>
&lt;li>&lt;code>src_id&lt;/code>：關係的起始實體名稱。&lt;/li>
&lt;li>&lt;code>tgt_id&lt;/code>：關係的目標實體名稱。&lt;/li>
&lt;li>&lt;code>content&lt;/code>：關係的描述與類別（可能包含多種語意標籤，如 companionship, ownership）。&lt;/li>
&lt;li>&lt;code>file_path&lt;/code>：來源文件。&lt;/li>
&lt;li>&lt;code>source_id&lt;/code>：對應的文本 chunk。&lt;/li>
&lt;li>&lt;code>__created_at__&lt;/code>：建立時間。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>用途&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>支援「語義圖譜檢索」，例如：&lt;br>
問「阿墨和林致远的關係？」 → 檢索 companionship 與 mysterious connection。&lt;/li>
&lt;li>提供結構化的語意推理，補強向量檢索。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="4-總結">4. 總結
&lt;/h2>&lt;ul>
&lt;li>kv_store* 系列 → 偏向文件與片段的管理、狀態與快取。&lt;/li>
&lt;li>vdb* 系列 → 偏向語義層面的知識圖譜與向量檢索。&lt;/li>
&lt;li>entities 與 relationships → 構成知識圖譜 (Knowledge Graph)。&lt;/li>
&lt;li>chunks 與 embeddings → 構成語意檢索的基礎。&lt;/li>
&lt;/ul></description></item><item><title>LightRAG API Server 教學：快速上手指南</title><link>https://Dandelionlibra.github.io/post/note/lightrag-api-server-tutorial/</link><pubDate>Fri, 01 Aug 2025 06:00:00 +0800</pubDate><guid>https://Dandelionlibra.github.io/post/note/lightrag-api-server-tutorial/</guid><description>&lt;h1 id="lightrag-api-server-教學快速上手指南">LightRAG API Server 教學：快速上手指南
&lt;/h1>&lt;p>&lt;a class="link" href="https://github.com/HKUDS/LightRAG" target="_blank" rel="noopener"
>LightRAG&lt;/a> 是一個輕量級、模組化的 RAG（檢索增強生成）框架，旨在簡化 RAG 應用的開發與部署。其內建的 API Server 遵循 OpenAI API 標準，並提供一套完整的 Web UI API 來管理文件與知識圖譜，讓開發者能輕易地將自訂的 RAG 流程封裝成服務，並與現有生態系無縫接軌。本文將引導初學者完成從環境設定到 API 呼叫的完整流程。&lt;/p>
&lt;hr>
&lt;h2 id="1-安裝與環境設定">1. 安裝與環境設定
&lt;/h2>&lt;h3 id="11-安裝-lightrag">1.1. 安裝 LightRAG
&lt;/h3>&lt;ul>
&lt;li>install from PyPl&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install &lt;span style="color:#e6db74">&amp;#34;lightrag-hku[api]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Installation from Source&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 1. Clone the repository&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/HKUDS/LightRAG.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd LightRAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 2. create a Python virtual environment if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 3. Install in editable mode with API support&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install -e &lt;span style="color:#e6db74">&amp;#34;.[api]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 4. 修改範例環境文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp env.example .env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 5. 啟動 API Server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lightrag-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-環境文件設定">1.2. 環境文件設定
&lt;/h3>&lt;ul>
&lt;li>OpenAI LLM + Ollama Embedding:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>LLM_BINDING=openai
LLM_MODEL=gpt-4o
LLM_BINDING_HOST=https://api.openai.com/v1
LLM_BINDING_API_KEY=your_api_key
EMBEDDING_BINDING=ollama
EMBEDDING_BINDING_HOST=http://localhost:11434
EMBEDDING_MODEL=bge-m3:latest
EMBEDDING_DIM=1024
# EMBEDDING_BINDING_API_KEY=your_api_key
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Ollama LLM + Ollama Embedding:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>LLM_BINDING=ollama
LLM_MODEL=mistral-nemo:latest
LLM_BINDING_HOST=http://localhost:11434
# LLM_BINDING_API_KEY=your_api_key
### Ollama Server context length (Must be larger than MAX_TOTAL_TOKENS+2000)
OLLAMA_LLM_NUM_CTX=16384
EMBEDDING_BINDING=ollama
EMBEDDING_BINDING_HOST=http://localhost:11434
EMBEDDING_MODEL=bge-m3:latest
EMBEDDING_DIM=1024
# EMBEDDING_BINDING_API_KEY=your_api_key
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>其他環境設定參數：
&lt;ul>
&lt;li>&lt;code>--host&lt;/code>：伺服器監聽位址（預設：0.0.0.0）&lt;/li>
&lt;li>&lt;code>--port&lt;/code>：伺服器監聽連接埠（預設：9621）&lt;/li>
&lt;li>&lt;code>--timeout&lt;/code>：LLM 請求逾時（預設值：150 秒）&lt;/li>
&lt;li>&lt;code>--log-level&lt;/code>：日誌等級（預設：INFO）&lt;/li>
&lt;li>&lt;code>--working-dir&lt;/code>：資料庫持久目錄（預設：./rag_storage）&lt;/li>
&lt;li>&lt;code>--input-dir&lt;/code>：上傳檔案的目錄（預設值：./inputs）&lt;/li>
&lt;li>&lt;code>--workspace&lt;/code>：工作區名稱，用於邏輯隔離多個 LightRAG 實例之間的資料（預設：空），及所以工作共用同一個資料目錄&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="13-使用-docker-啟動-lightrag-伺服器">1.3. 使用 Docker 啟動 LightRAG 伺服器
&lt;/h3>&lt;p>建立名為 &lt;code>docker compose.yml&lt;/code> 的檔案：&lt;/p>
&lt;pre tabindex="0">&lt;code>services:
lightrag:
container_name: lightrag
image: ghcr.io/hkuds/lightrag:latest
ports:
- &amp;#34;${PORT:-9621}:9621&amp;#34;
volumes:
- ./data/rag_storage:/app/data/rag_storage
- ./data/inputs:/app/data/inputs
- ./config.ini:/app/config.ini
- ./.env:/app/.env
env_file:
- .env
restart: unless-stopped
extra_hosts:
- &amp;#34;host.docker.internal:host-gateway&amp;#34;
&lt;/code>&lt;/pre>&lt;p>啟動 LightRAG 伺服器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker compose up
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># If you want the program to run in the background after startup, add the -d parameter at the end of the command.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="2-啟動-api-server">2. 啟動 API Server
&lt;/h2>&lt;p>LightRAG 使用一個 YAML 檔案來設定 API Server，包含端口、API 路徑以及要載入的模型。專案內已提供一個範例設定檔 &lt;code>lightrag_webui/config.yaml&lt;/code>。&lt;/p>
&lt;p>進入容器後使用以下指令啟動伺服器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>lightrag-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Server 成功啟動後，您會看到類似以下的輸出，代表伺服器正在 &lt;code>localhost:9621&lt;/code> 上運行：&lt;/p>
&lt;pre tabindex="0">&lt;code> ╔══════════════════════════════════════════════════════════════╗
║ LightRAG Server v1.4.4/0189 ║
║ Fast, Lightweight RAG Server Implementation ║
╚══════════════════════════════════════════════════════════════╝
📡 Server Configuration:
├─ Host: 0.0.0.0
├─ Port: 9621
├─ Workers: 1
├─ CORS Origins: *
├─ SSL Enabled: False
├─ Ollama Emulating Model: lightrag:latest
├─ Log Level: INFO
├─ Verbose Debug: False
├─ History Turns: 0
├─ API Key: Not Set
└─ JWT Auth: Disabled
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="3-api-端點詳解">3. API 端點詳解
&lt;/h2>&lt;p>&lt;code>-X&lt;/code>: 指定 HTTP 方法&lt;br>
&lt;code>-H&lt;/code>: 加入 HTTP 標頭&lt;/p>
&lt;blockquote>
&lt;p>ex. &lt;code>-H &amp;quot;Content-Type: application/json&amp;quot;&lt;/code> 用於告知伺服器此次請求的資料格式是 JSON。&lt;br>
可多次使用 &lt;code>-H&lt;/code> 加標頭。&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>-d&lt;/code>: 傳送請求資料，常搭配 &lt;code>POST&lt;/code>,&lt;code>PUT&lt;/code> 使用，當指定 &lt;code>Content-Type: application/json&lt;/code> 時，會把內容當 JSON 傳送。&lt;br>
&lt;code>-v&lt;/code>: verbose 模式，顯示完整請求與回應過程，主要用於除錯。&lt;br>
&lt;code>-o &amp;lt;file&amp;gt;&lt;/code>: 輸出到檔案中。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>獲取文件 api 教學&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>lightrag-server --help
&lt;/code>&lt;/pre>&lt;p>或在連上 server 後開啟: http://localhost:9621/redoc#tag/documents/operation&lt;/p>
&lt;hr>
&lt;h3 id="31-documents">3.1. Documents
&lt;/h3>&lt;hr>
&lt;h4 id="311-scan-for-new-documents">3.1.1. Scan For New Documents
&lt;/h4>&lt;p>&lt;code>POST&lt;/code>: &lt;code>/documents/scan&lt;/code>&lt;br>
啟動背景掃描，去檢查輸入目錄中是否有新的文件，若有則讀取這些文件。&lt;/p>
&lt;p>&lt;strong>回傳內容&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>status&lt;/code>(required): Status of the scanning operation.&lt;br>
value: &lt;code>scanning_started&lt;/code>&lt;/li>
&lt;li>&lt;code>message&lt;/code>: Additional details about the scanning operation.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -X POST &lt;span style="color:#e6db74">&amp;#34;http://localhost:9621/documents/scan&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h4 id="312-upload-to-input-dir">3.1.2. Upload To Input Dir
&lt;/h4>&lt;p>&lt;code>POST&lt;/code>: &lt;code>/documents/upload&lt;/code>&lt;br>
將檔案上傳到指定的目錄，再對其進行索引，以便檢索。&lt;/p>
&lt;p>&lt;strong>傳入參數&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>file&lt;/code>(required): 要上傳的檔案。&lt;/li>
&lt;li>&lt;code>api_key_header_value&lt;/code>: 有些伺服器可能需要 API Key 做身份驗證。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>回傳內容&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>status&lt;/code>(required): Status of the uploadding operation.&lt;br>
Enum: &lt;code>success&lt;/code>、&lt;code>duplicated&lt;/code>、&lt;code>partial_success&lt;/code>、&lt;code>failure&lt;/code>&lt;/li>
&lt;li>&lt;code>message&lt;/code>(required): Message describing the operation result.&lt;/li>
&lt;/ul>
&lt;p>※&lt;code>-F &amp;quot;file=@檔案路徑&amp;quot;&lt;/code> 用於傳 multipart/form-data。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -X POST &lt;span style="color:#e6db74">&amp;#34;http://localhost:9621/documents/upload&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -F &lt;span style="color:#e6db74">&amp;#34;file=@./../prince_docs/little_prince_1.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;hr>
&lt;h3 id="32-query">3.2. Query
&lt;/h3>&lt;pre>&lt;code>mode: Literal[&amp;quot;local&amp;quot;, &amp;quot;global&amp;quot;, &amp;quot;hybrid&amp;quot;, &amp;quot;naive&amp;quot;, &amp;quot;mix&amp;quot;, &amp;quot;bypass&amp;quot;] = &amp;quot;global&amp;quot;
&amp;quot;&amp;quot;&amp;quot;Specifies the retrieval mode:
- &amp;quot;local&amp;quot;: Focuses on context-dependent information.
- &amp;quot;global&amp;quot;: Utilizes global knowledge.
- &amp;quot;hybrid&amp;quot;: Combines local and global retrieval methods.
- &amp;quot;naive&amp;quot;: Performs a basic search without advanced techniques.
- &amp;quot;mix&amp;quot;: Integrates knowledge graph and vector retrieval.
&amp;quot;&amp;quot;&amp;quot;
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h3 id="33-documents">3.3. Documents
&lt;/h3>&lt;p>LightRAG API Server 提供兩類主要的端點：一類是遵循 OpenAI 標準的核心聊天 API，另一類是 Web UI 用於管理資料的 API。&lt;/p>
&lt;h3 id="31-openai-標準-api">3.1. OpenAI 標準 API
&lt;/h3>&lt;p>這組 API 讓 LightRAG 可以輕易地整合進現有的 OpenAI 生態系。&lt;/p>
&lt;h4 id="311-get-apiv1models">3.1.1. &lt;code>GET /api/v1/models&lt;/code>
&lt;/h4>&lt;p>此端點用於查詢當前伺服器上所有可用的模型。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>功能&lt;/strong>: 列出在設定檔中定義的所有模型名稱。&lt;/li>
&lt;li>&lt;strong>範例&lt;/strong>:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -X GET http://localhost:8008/api/v1/models
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>回應&lt;/strong>:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;object&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;list&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;LightRAG&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;object&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1721615822&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;owned_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;lightrag&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="312-post-apiv1chatcompletions">3.1.2. &lt;code>POST /api/v1/chat/completions&lt;/code>
&lt;/h4>&lt;p>這是核心的聊天互動端點，功能與 OpenAI 的 Chat Completions API 完全相容。它接收使用者輸入，執行 RAG 流程，並回傳 LLM 生成的答案。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>功能&lt;/strong>: 執行一個完整的 RAG 查詢。&lt;/li>
&lt;li>&lt;strong>範例&lt;/strong>:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -X POST http://localhost:8008/api/v1/chat/completions &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-d &lt;span style="color:#e6db74">&amp;#39;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;model&amp;#34;: &amp;#34;LightRAG&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;messages&amp;#34;: [
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;role&amp;#34;: &amp;#34;user&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;content&amp;#34;: &amp;#34;What is Retrieval-Augmented Generation?&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="32-web-ui-api-總覽">3.2. Web UI API 總覽
&lt;/h3>&lt;p>這組 API 主要由 LightRAG 的 Web UI 使用，提供文件處理、查詢、知識圖譜管理等進階功能。&lt;/p>
&lt;h4 id="321-文件-documents-api">3.2.1. 文件 (Documents) API
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">方法&lt;/th>
&lt;th style="text-align: left">路徑&lt;/th>
&lt;th style="text-align: left">說明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents/scan&lt;/code>&lt;/td>
&lt;td style="text-align: left">掃描輸入資料夾中的新文件並進行處理。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents/upload&lt;/code>&lt;/td>
&lt;td style="text-align: left">上傳文件至輸入資料夾。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents/text&lt;/code>&lt;/td>
&lt;td style="text-align: left">插入單筆文字資料。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents/texts&lt;/code>&lt;/td>
&lt;td style="text-align: left">插入多筆文字資料。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>DELETE&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents&lt;/code>&lt;/td>
&lt;td style="text-align: left">清除所有已處理的文件資料。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>GET&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents&lt;/code>&lt;/td>
&lt;td style="text-align: left">獲取已處理的文件列表。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>GET&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents/pipeline_status&lt;/code>&lt;/td>
&lt;td style="text-align: left">獲取文件處理管道的狀態。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>DELETE&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents/delete_document&lt;/code>&lt;/td>
&lt;td style="text-align: left">根據文件 ID 刪除指定文件及其相關資料。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents/clear_cache&lt;/code>&lt;/td>
&lt;td style="text-align: left">清除快取。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>DELETE&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents/delete_entity&lt;/code>&lt;/td>
&lt;td style="text-align: left">刪除指定的實體。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>DELETE&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/documents/delete_relation&lt;/code>&lt;/td>
&lt;td style="text-align: left">刪除指定的關係。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="322-查詢-query-api">3.2.2. 查詢 (Query) API
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">方法&lt;/th>
&lt;th style="text-align: left">路徑&lt;/th>
&lt;th style="text-align: left">說明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/query&lt;/code>&lt;/td>
&lt;td style="text-align: left">提交一個查詢並獲取一次性回覆。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/query/stream&lt;/code>&lt;/td>
&lt;td style="text-align: left">提交一個查詢並以串流方式獲取回覆。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="323-知識圖譜-graph-api">3.2.3. 知識圖譜 (Graph) API
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">方法&lt;/th>
&lt;th style="text-align: left">路徑&lt;/th>
&lt;th style="text-align: left">說明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;code>GET&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/graph/label/list&lt;/code>&lt;/td>
&lt;td style="text-align: left">獲取知識圖譜中所有的標籤 (Labels)。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>GET&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/graphs&lt;/code>&lt;/td>
&lt;td style="text-align: left">獲取完整的知識圖譜資料。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>GET&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/graph/entity/exists&lt;/code>&lt;/td>
&lt;td style="text-align: left">檢查指定的實體是否存在。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/graph/entity/edit&lt;/code>&lt;/td>
&lt;td style="text-align: left">更新一個實體的資訊。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/graph/relation/edit&lt;/code>&lt;/td>
&lt;td style="text-align: left">更新一個關係的資訊。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="324-ollama-相容-api">3.2.4. Ollama 相容 API
&lt;/h4>&lt;p>LightRAG 也提供與 Ollama 相容的 API 端點，方便與相關工具整合。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">方法&lt;/th>
&lt;th style="text-align: left">路徑&lt;/th>
&lt;th style="text-align: left">說明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;code>GET&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/api/version&lt;/code>&lt;/td>
&lt;td style="text-align: left">獲取 API 版本。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>GET&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/api/tags&lt;/code>&lt;/td>
&lt;td style="text-align: left">獲取可用的模型標籤。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>GET&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/api/ps&lt;/code>&lt;/td>
&lt;td style="text-align: left">獲取正在運行的模型。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/api/generate&lt;/code>&lt;/td>
&lt;td style="text-align: left">根據提示生成文字。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>POST&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>/api/chat&lt;/code>&lt;/td>
&lt;td style="text-align: left">進行聊天互動。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="4-總結">4. 總結
&lt;/h2>&lt;p>LightRAG 的 API Server 提供了一個標準化且功能豐富的介面，讓開發者能將複雜的 RAG 流程部署為一個獨立服務。透過遵循 OpenAI 的 API 格式並提供完整的文件管理 API，它極大地降低了整合門檻，無論是進行快速原型設計，還是將其整合到現有的應用程式中，都變得非常方便。希望本篇教學能幫助您順利踏出使用 LightRAG 的第一步。&lt;/p></description></item><item><title>GraphRAG vs LightRAG</title><link>https://Dandelionlibra.github.io/post/note/graphrag-lightrag-compare/</link><pubDate>Thu, 31 Jul 2025 03:24:00 +0800</pubDate><guid>https://Dandelionlibra.github.io/post/note/graphrag-lightrag-compare/</guid><description>&lt;h1 id="rag-種類">RAG 種類
&lt;/h1>&lt;h2 id="native-rag">Native RAG
&lt;/h2>&lt;p>嘗試解決內部資訊缺失的問題。&lt;br>
RAG 在回答前會先基於提問與資料庫中內容的語意相似度篩選出最具關連的段落 (chunk) 再將這些資訊傳給 LLM 進行回答，但受限於檢索到的 chunk 內容，因此若是詢問的問題比較全面，例如主題大綱等等，因為需要全面的資料內容，但檢索後卻使會提供給 LLM 部分內容而已，因此可預測回答準確率大概不高，但是若是法規等問題回答結果會更精確。&lt;/p>
&lt;h2 id="graph-rag">Graph RAG
&lt;/h2>&lt;p>嘗試解決 Native RAG 回答不精確的問題。&lt;/p>
&lt;h2 id="light-rag">Light RAG
&lt;/h2>&lt;hr>
&lt;h1 id="引言">引言
&lt;/h1>&lt;h2 id="現有-rag-系統的局限性">現有 RAG 系統的局限性
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>依賴平面資料表示：&lt;/strong> 許多方法依賴於平面資料表示（flat data representations），限制了它們根據實體之間複雜關係來理解和檢索資訊的能力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缺乏上下文感知：&lt;/strong> 這些系統通常缺乏維持不同實體及其相互關係之間連貫性所需的上下文感知能力，導致回應可能無法完全解決用戶查詢。&lt;/p>
&lt;blockquote>
&lt;p>例：考慮用戶提問「電動車的興起如何影響城市空氣品質和大眾運輸基礎設施？」現有 RAG 方法可能檢索到關於電動車、空氣污染和公共交通挑戰的獨立文檔，但難以將這些信息綜合為一個連貫的回應。它們可能無法解釋電動車的普及如何改善空氣品質，進而可能影響公共交通規劃，用戶可能收到一個碎片化的答案，未能充分捕捉這些主題之間複雜的相互依賴關係。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="lightrag-模型概述">LightRAG 模型概述
&lt;/h2>&lt;p>增強了系統捕捉實體之間複雜相互依賴關係的能力，從而產生更連貫和上下文更豐富的回應。&lt;/p>
&lt;hr>
&lt;h1 id="內文">內文
&lt;/h1>&lt;h2 id="lightrag-框架的整體架構">LightRAG 框架的整體架構
&lt;/h2>&lt;p>&lt;img src="https://raw.githubusercontent.com/HKUDS/LightRAG/refs/heads/main/README.assets/b2aaf634151b4706892693ffb43d9093.png"
loading="lazy"
alt="LightRAG 框架總覽"
>&lt;br>
&lt;em>圖 1. LightRAG 框架總覽（取自原論文）&lt;/em>&lt;/p>
&lt;p>架構如圖 1 所示。&lt;/p>
&lt;hr>
&lt;h1 id="實驗">實驗
&lt;/h1>&lt;hr>
&lt;hr>
&lt;h1 id="reference">Reference
&lt;/h1>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=-O5ATdQcefo" target="_blank" rel="noopener"
>LightRAG与GraphRAG对比评测，从索引构建、本地检索、全局检索、混合检索等维度对请求大模型次数、Token消耗、金额消耗、检索质量等方面进行全面对比&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/NanGePlus/LightRAGTest" target="_blank" rel="noopener"
>GitHub: [LightRAGTest]&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>LightRAG 論文導讀 — Simple and Fast Retrieval-Augmented Generation 筆記</title><link>https://Dandelionlibra.github.io/post/paper/lightrag-paper-review/</link><pubDate>Tue, 22 Jul 2025 05:27:00 +0800</pubDate><guid>https://Dandelionlibra.github.io/post/paper/lightrag-paper-review/</guid><description>&lt;blockquote>
&lt;p>本文整理自：&lt;a class="link" href="https://arxiv.org/abs/2410.05779" target="_blank" rel="noopener"
>LightRAG: Simple and Fast Retrieval-Augmented Generation&lt;/a>&lt;br>
作者：Zirui Guo, Lianghao Xia, Yanhua Yu, Tu Ao, Chao Huang&lt;br>
發佈於 arXiv，2024年10月&lt;/p>&lt;/blockquote>
&lt;h1 id="摘要">摘要
&lt;/h1>&lt;p>RAG 透過整合外部知識來源，提升 LLMs 回應的準確性與上下文相關性，但面臨&lt;strong>過度依賴平面資料表示&lt;/strong> (flat data representations)、&lt;strong>上下文感知能力不足&lt;/strong> (inadequate contextual awareness)、&lt;strong>導致生成碎片化答案&lt;/strong> (fragmented answers)，無法捕捉複雜的相互依賴關係 (inter-dependencies)。&lt;br>
LightRAG，提出透過將圖結構 (graph structures) 引入文本的索引 (text indexing) 和檢索 (retrieval) 過程來解決上述問題。&lt;/p>
&lt;hr>
&lt;h1 id="引言">引言
&lt;/h1>&lt;h2 id="現有-rag-系統的局限性">現有 RAG 系統的局限性
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>依賴平面資料表示：&lt;/strong> 許多方法依賴於平面資料表示（flat data representations），限制了它們根據實體之間複雜關係來理解和檢索資訊的能力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缺乏上下文感知：&lt;/strong> 這些系統通常缺乏維持不同實體及其相互關係之間連貫性所需的上下文感知能力，導致回應可能無法完全解決用戶查詢。&lt;/p>
&lt;blockquote>
&lt;p>例：考慮用戶提問「電動車的興起如何影響城市空氣品質和大眾運輸基礎設施？」現有 RAG 方法可能檢索到關於電動車、空氣污染和公共交通挑戰的獨立文檔，但難以將這些信息綜合為一個連貫的回應。它們可能無法解釋電動車的普及如何改善空氣品質，進而可能影響公共交通規劃，用戶可能收到一個碎片化的答案，未能充分捕捉這些主題之間複雜的相互依賴關係。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="lightrag-模型概述">LightRAG 模型概述
&lt;/h2>&lt;p>增強了系統捕捉實體之間複雜相互依賴關係的能力，從而產生更連貫和上下文更豐富的回應。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>高效雙層檢索策略：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>低層次檢索（low-level retrieval）： 側重於關於特定實體及其關係的精確資訊。&lt;/li>
&lt;li>高層次檢索（high-level retrieval）： 涵蓋更廣泛的主題和概念。&lt;/li>
&lt;li>優勢： 透過結合詳細和概念性檢索，LightRAG 有效適應多樣化的查詢範圍，確保用戶收到符合其特定需求的相關且全面的回應。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>圖結構與向量表示的整合：&lt;/strong> 透過將圖結構與向量表示整合在一起，本 LightRAG 促進了相關實體和關係的高效檢索，同時透過從所構建的知識圖中獲取相關結構信息，增強了結果的全面性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="本研究在-rag-系統中的關注點">本研究在 RAG 系統中的關注點
&lt;/h2>&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>
&lt;p>&lt;strong>全面信息檢索&lt;/strong> (Comprehensive Information Retrieval)： 索引功能 ϕ(⋅) 必須善於提取全局信息，這對於增強模型有效回答查詢的能力至關重要。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>高效且低成本檢索&lt;/strong> (Efficient and Low-Cost Retrieval)： 索引化的資料結構 𝒟^ 必須能夠實現快速且具成本效益的檢索，以有效處理高容量的查詢。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>快速適應數據變化&lt;/strong> (Fast Adaptation to Data Changes)： 能夠迅速有效地調整數據結構以整合來自外部知識庫的新信息，這對於確保系統在不斷變化的信息環境中保持更新和相關性至關重要。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="內文">內文
&lt;/h1>&lt;h2 id="lightrag-框架的整體架構">LightRAG 框架的整體架構
&lt;/h2>&lt;p>&lt;img src="https://raw.githubusercontent.com/HKUDS/LightRAG/refs/heads/main/README.assets/b2aaf634151b4706892693ffb43d9093.png"
loading="lazy"
alt="LightRAG 框架總覽"
>&lt;br>
&lt;em>圖 1. LightRAG 框架總覽（取自原論文）&lt;/em>&lt;/p>
&lt;p>架構如圖 1 所示。&lt;/p>
&lt;p>流程從&lt;strong>原始文本塊&lt;/strong>開始，這些文本塊首先透過&lt;strong>基於圖形的文本索引&lt;/strong>（Graph-based Text Indexing）階段進行處理，過程包含幾個關鍵子組件：&lt;strong>實體與關係提取&lt;/strong>（Entity &amp;amp; Rel Extraction）、&lt;strong>LLM 剖析&lt;/strong>（LLM Profiling）和&lt;strong>去重&lt;/strong>（Deduplication），最後的輸出是一個用於檢索的&lt;strong>索引圖&lt;/strong>（Index Graph）。&lt;br>
接著，Query LLM 接收輸入查詢，並從中生成&lt;strong>低層級關鍵字&lt;/strong>（Low-level Keys，包括實體和關係）和&lt;strong>高層級關鍵字&lt;/strong>（High-level Keys，包括語境和原始文本塊）。這些關鍵字隨後被送入&lt;strong>雙層級檢索範式&lt;/strong>（Dual-level Retrieval Paradigm），此範式與「索引圖」和「原始文本塊」互動，以檢索相關資訊。最終，檢索到的資訊被傳回 Query LLM 進行檢索增強的答案生成（Retrieval-Augmented Answer Generation）。  
圖中展示了以「索引圖」作為核心儲存庫，這張圖不僅用來整理新資訊（索引），也用來尋找資訊（檢索），這代表系統不再只是儲存一堆零散的文字片段，而是將知識組織成一個有結構的網路，能更智慧地找出事物之間的關聯。&lt;br>
此外，處理查詢的 LLM 在 LightRAG 多次出現，它不只負責生成最終答案，還會參與理解問題、引導系統去尋找相關資訊，並將找到的資料整合起來。&lt;/p>
&lt;h2 id="基於圖形的文本索引">基於圖形的文本索引
&lt;/h2>&lt;p>LightRAG 透過將文件分割成更小、更易於管理的片段來增強檢索系統。這種策略允許快速識別和存取相關資訊，而無需分析整個文件 。隨後，系統利用大型語言模型（LLMs）來識別和提取各種實體（例如，名稱、日期、位置和事件）以及它們之間的關係 。透過這個過程收集到的資訊將用於創建一個全面的知識圖譜，突顯整個文件集合中的連結和見解。&lt;/p>
&lt;p>圖形生成模組正式表示為 𝒟^=(𝒱^,ℰ^)=Dedupe∘Prof​(𝒱,ℰ),𝒱,ℰ=∪𝒟i∈𝒟Recog​(𝒟i)&lt;/p>
&lt;hr>
&lt;h1 id="實驗">實驗
&lt;/h1>&lt;hr>
&lt;hr>
&lt;h1 id="reference">Reference
&lt;/h1>&lt;ul>
&lt;li>&lt;a class="link" href="https://ar5iv.labs.arxiv.org/html/2410.05779" target="_blank" rel="noopener"
>LightRAG: Simple and Fast Retrieval-Augmented Generation-ar5iv 可視化版本&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>