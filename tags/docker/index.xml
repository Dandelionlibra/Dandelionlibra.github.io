<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on YuChen</title><link>https://Dandelionlibra.github.io/tags/docker/</link><description>Recent content in Docker on YuChen</description><generator>Hugo -- gohugo.io</generator><language>zh-Hant-TW</language><lastBuildDate>Thu, 17 Jul 2025 10:00:00 +0000</lastBuildDate><atom:link href="https://Dandelionlibra.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Docker 快速建立 Jupyter Notebook 環境教學</title><link>https://Dandelionlibra.github.io/post/virtual-environment/docker/setup-jupyter-notebook-with-docker/</link><pubDate>Thu, 17 Jul 2025 10:00:00 +0000</pubDate><guid>https://Dandelionlibra.github.io/post/virtual-environment/docker/setup-jupyter-notebook-with-docker/</guid><description>&lt;h2 id="內容大綱">內容大綱
&lt;/h2>&lt;ol>
&lt;li>為什麼用 Docker 建立 Jupyter Notebook？&lt;/li>
&lt;li>安裝 Docker
&lt;ul>
&lt;li>Linux&lt;/li>
&lt;li>Mac&lt;/li>
&lt;li>Windows&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>下載與執行 Jupyter Notebook Docker 映像檔&lt;/li>
&lt;li>設定 Notebook 存取與資料掛載&lt;/li>
&lt;li>使用 GPU&lt;/li>
&lt;li>參考資料&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="1-為什麼用-docker-建立-jupyter-notebook">1. 為什麼用 Docker 建立 Jupyter Notebook？
&lt;/h2>&lt;p>Docker 可讓你快速建立隔離的開發環境，避免本機安裝衝突。Jupyter Notebook 是資料科學常用的互動式開發工具，透過 Docker 可輕鬆部署、移植與分享。&lt;/p>
&lt;hr>
&lt;h2 id="2-安裝-docker">2. 安裝 Docker
&lt;/h2>&lt;h3 id="linux">Linux
&lt;/h3>&lt;p>大多數 Linux 發行版可透過套件管理器安裝 Docker：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 更新套件清單&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 安裝 Docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt install docker.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 啟動 Docker 服務&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl start docker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 設定開機自動啟動&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl enable docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mac">Mac
&lt;/h3>&lt;p>前往 &lt;a class="link" href="https://www.docker.com/products/docker-desktop/" target="_blank" rel="noopener"
>Docker Desktop for Mac&lt;/a> 下載並安裝。&lt;/p>
&lt;h3 id="windows">Windows
&lt;/h3>&lt;p>前往 &lt;a class="link" href="https://www.docker.com/products/docker-desktop/" target="_blank" rel="noopener"
>Docker Desktop for Windows&lt;/a> 下載並安裝。&lt;/p>
&lt;hr>
&lt;h2 id="3-下載與執行-jupyter-notebook-docker-映像檔">3. 下載與執行 Jupyter Notebook Docker 映像檔
&lt;/h2>&lt;p>官方映像檔推薦使用 &lt;a class="link" href="https://hub.docker.com/r/jupyter/base-notebook" target="_blank" rel="noopener"
>&lt;code>jupyter/base-notebook&lt;/code>&lt;/a> 或 &lt;a class="link" href="https://hub.docker.com/r/jupyter/scipy-notebook" target="_blank" rel="noopener"
>&lt;code>jupyter/scipy-notebook&lt;/code>&lt;/a>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>拉取映像檔&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull jupyter/base-notebook
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>建立容器&lt;br>
&lt;code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]&lt;/code>&lt;/p>
&lt;p>啟動容器並開啟本機 8888 端口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -p 8888:8888 jupyter/base-notebook
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>啟動後，終端機會顯示一組 token，複製網址（如 &lt;code>http://127.0.0.1:8888/?token=...&lt;/code>）在瀏覽器開啟即可進入 Jupyter Notebook。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>※ &lt;a class="link" href="https://hub.docker.com" target="_blank" rel="noopener"
>&lt;code>DockerHub&lt;/code>&lt;/a>: DockerHub 是官方的 Docker 映像檔集中平台，提供各種應用程式的映像檔下載與分享，可以在這裡搜尋、取得映像檔，快速部署環境。&lt;/p>
&lt;hr>
&lt;h2 id="4-設定-notebook-存取與資料掛載">4. 設定 Notebook 存取與資料掛載
&lt;/h2>&lt;p>若要將本機資料夾掛載到容器，方便存取與保存 notebook 檔案：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -p 8888:8888 -v /your/local/path:/home/jovyan/work --name my-jupyter jupyter/base-notebook
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-p&lt;/code>: Assigns the internal port to the external port&lt;/li>
&lt;li>&lt;code>-v&lt;/code>: Assigns a local directory to a container directory (mounts a volume)&lt;/li>
&lt;li>&lt;code>/your/local/path&lt;/code>：本機資料夾路徑&lt;/li>
&lt;li>&lt;code>/home/jovyan/work&lt;/code>：容器內預設工作目錄&lt;/li>
&lt;li>&lt;code>--name&lt;/code>: Sets the container name; otherwise, a random name will be assigned&lt;/li>
&lt;/ul>
&lt;p>可自訂密碼或 token，詳見 &lt;a class="link" href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/common.html#docker-options" target="_blank" rel="noopener"
>官方文件&lt;/a>。&lt;/p>
&lt;h2 id="5-使用-gpu">5. 使用 GPU
&lt;/h2>&lt;p>若你的主機支援 NVIDIA GPU，可利用 &lt;a class="link" href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html" target="_blank" rel="noopener"
>NVIDIA Container Toolkit&lt;/a> 讓 Docker 容器存取 GPU 資源。&lt;/p>
&lt;h3 id="步驟">步驟
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>安裝 NVIDIA 驅動程式&lt;/strong>&lt;br>
請先安裝對應作業系統的 NVIDIA 顯示卡驅動。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安裝 NVIDIA Container Toolkit&lt;/strong>&lt;br>
依照官方文件安裝 &lt;code>nvidia-docker&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get install -y nvidia-docker2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl restart docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>啟動支援 GPU 的 Jupyter Notebook 容器&lt;/strong>&lt;br>
使用 &lt;code>--gpus all&lt;/code> 參數啟動容器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --gpus all -p 8888:8888 --name gpu_note -v ~/name:/tf/name tensorflow/tensorflow:latest-gpu-jupyter
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>驗證 GPU 是否可用&lt;/strong>&lt;br>
在 Notebook 中執行下列程式碼，確認 GPU 是否被偵測到：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> tensorflow &lt;span style="color:#66d9ef">as&lt;/span> tf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(tf&lt;span style="color:#f92672">.&lt;/span>config&lt;span style="color:#f92672">.&lt;/span>list_physical_devices(&lt;span style="color:#e6db74">&amp;#39;GPU&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>注意：部分映像檔可能需額外安裝 CUDA、cuDNN 或深度學習框架，請參考 &lt;a class="link" href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/recipes.html#using-gpus" target="_blank" rel="noopener"
>Jupyter Docker Stacks 官方說明&lt;/a>。&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;h2 id="6-參考資料">6. 參考資料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://jupyter-docker-stacks.readthedocs.io/" target="_blank" rel="noopener"
>Jupyter Docker Stacks 官方文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.docker.com/" target="_blank" rel="noopener"
>Docker 官方網站&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://jupyter.org/" target="_blank" rel="noopener"
>Jupyter Notebook 官方網站&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>使用 Docker-compose 快速建立多個關聯的 container</title><link>https://Dandelionlibra.github.io/post/virtual-environment/docker/docker-compose/</link><pubDate>Thu, 17 Jul 2025 10:00:00 +0000</pubDate><guid>https://Dandelionlibra.github.io/post/virtual-environment/docker/docker-compose/</guid><description>&lt;h2 id="內容大綱">內容大綱
&lt;/h2>&lt;ol>
&lt;li>為什麼要用 Docker-compose?&lt;/li>
&lt;li>Docker-compose 基本語法與結構&lt;/li>
&lt;li>建立多個關聯容器的範例&lt;/li>
&lt;li>常用指令與管理方式&lt;/li>
&lt;li>參考資料&lt;/li>
&lt;/ol>
&lt;h2 id="1-為什麼要用-docker-compose">1. 為什麼要用 Docker-compose？
&lt;/h2>&lt;p>當專案需要多個服務（如資料庫、後端、前端）協同運作時，單靠 &lt;code>docker run&lt;/code> 指令管理多個容器會變得複雜。Docker-compose 讓你能用一份 YAML 設定檔，定義多個 container 的建置、網路、資料掛載與依賴關係，一鍵啟動或關閉整個應用環境，提升開發效率與可維護性。&lt;/p>
&lt;hr>
&lt;h2 id="2-docker-compose-基本語法與結構">2. Docker-compose 基本語法與結構
&lt;/h2>&lt;p>Docker-compose 透過 &lt;code>docker-compose.yml&lt;/code> 檔案描述多個服務、網路、資料卷，並可設定健康檢查與指定 GPU。基本結構如下：&lt;/p>
&lt;p>詳細說明可參考官方文件：&lt;a class="link" href="https://docs.docker.com/reference/compose-file/services/" target="_blank" rel="noopener"
>Docker Compose&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;3.8&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">服務名稱&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">映像檔名稱&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;主機port:容器port&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">主機路徑:容器路徑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">自訂網路名稱&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reservations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">devices&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">driver&lt;/span>: &lt;span style="color:#ae81ff">nvidia&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">count&lt;/span>: &lt;span style="color:#ae81ff">all&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">capabilities&lt;/span>: [&lt;span style="color:#ae81ff">gpu]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">healthcheck&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">test&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;CMD&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;你的健康檢查指令&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">interval&lt;/span>: &lt;span style="color:#ae81ff">30s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">timeout&lt;/span>: &lt;span style="color:#ae81ff">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">retries&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">start_period&lt;/span>: &lt;span style="color:#ae81ff">60s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">自訂網路名稱&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">driver&lt;/span>: &lt;span style="color:#ae81ff">bridge&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>services&lt;/code>: 定義多個容器服務。&lt;/li>
&lt;li>&lt;code>image&lt;/code>: 指定映像檔。&lt;/li>
&lt;li>&lt;code>ports&lt;/code>: 對應主機與容器的 port。&lt;/li>
&lt;li>&lt;code>volumes&lt;/code>: 掛載主機資料夾到容器。&lt;/li>
&lt;li>&lt;code>networks&lt;/code>: 定義自訂網路，讓服務間可互通。&lt;/li>
&lt;li>&lt;code>deploy.resources.reservations.devices&lt;/code>: 指定 GPU 資源。&lt;/li>
&lt;li>&lt;code>healthcheck&lt;/code>: 健康檢查設定，確保服務正常運作。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-建立多個關聯容器的範例">3. 建立多個關聯容器的範例
&lt;/h2>&lt;p>以下範例說明如何用 Docker-compose 同時啟動 Jupyter（支援 GPU）與 Ollama 兩個服務，並讓它們透過自訂網路 &lt;code>ollama_net&lt;/code> 互相溝通：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dandelion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ollama_net&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">driver&lt;/span>: &lt;span style="color:#ae81ff">bridge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">jupyter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">pytorch/pytorch:2.3.0-cuda12.1-cudnn8-devel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tty&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;8888:8888&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">~/yuchen:/workspace/yuchen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">ollama_net&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reservations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">devices&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">driver&lt;/span>: &lt;span style="color:#ae81ff">nvidia&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">count&lt;/span>: &lt;span style="color:#ae81ff">all&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">capabilities&lt;/span>: [&lt;span style="color:#ae81ff">gpu]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ollama&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tty&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">ollama/ollama&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">ollama_net&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">~/yuchen/ollama:/root/.ollama&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;11435:11434&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reservations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">devices&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">driver&lt;/span>: &lt;span style="color:#ae81ff">nvidia&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">count&lt;/span>: &lt;span style="color:#ae81ff">all&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">capabilities&lt;/span>: [&lt;span style="color:#ae81ff">gpu]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">healthcheck&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">test&lt;/span>: &lt;span style="color:#ae81ff">/usr/local/bin/docker-healthcheck.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">interval&lt;/span>: &lt;span style="color:#ae81ff">30s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">timeout&lt;/span>: &lt;span style="color:#ae81ff">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">retries&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">start_period&lt;/span>: &lt;span style="color:#ae81ff">60s&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>networks&lt;/code> 讓 jupyter 與 ollama 服務可互通。&lt;/li>
&lt;li>&lt;code>port&lt;/code>
&lt;ul>
&lt;li>&amp;ldquo;11435:11434&amp;rdquo; 表示將主機（對外）上的 11435 端口映射到容器（對內）中的 11434 端口。&lt;/li>
&lt;li>外部訪問主機的 11435 端口時，實際會轉發到容器內部的 11434 端口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>deploy.resources.reservations.devices&lt;/code> 指定兩個服務都可使用所有 GPU。&lt;/li>
&lt;li>&lt;code>healthcheck&lt;/code> 可自動檢查服務健康狀態。&lt;/li>
&lt;li>&lt;code>volumes&lt;/code> 保持資料持久化。&lt;/li>
&lt;/ul>
&lt;p>這樣設定後，只需一行指令即可同時啟動、管理多個容器，並確保它們能互相連線與資料共享。&lt;/p>
&lt;p>啟動所有服務：&lt;br>
&lt;code>-d&lt;/code> 參數代表「detached mode」，也就是讓 Docker-Compose 在背景執行所有服務，而不佔用目前的終端視窗，不會顯示即時日誌。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker-compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>停止並移除所有服務：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker-compose down
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="4-常用指令與管理方式">4. 常用指令與管理方式
&lt;/h2>&lt;ul>
&lt;li>啟動所有服務：&lt;code>docker-compose up&lt;/code>&lt;/li>
&lt;li>背景執行：&lt;code>docker-compose up -d&lt;/code>&lt;/li>
&lt;li>停止服務：&lt;code>docker-compose down&lt;/code>&lt;/li>
&lt;li>查看日誌：&lt;code>docker-compose logs&lt;/code>&lt;/li>
&lt;li>進入容器：&lt;code>docker-compose exec &amp;lt;service&amp;gt; bash&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>更多指令可參考 &lt;a class="link" href="https://docs.docker.com/compose/reference/overview/" target="_blank" rel="noopener"
>官方文件&lt;/a>。&lt;/p>
&lt;hr>
&lt;h2 id="5-參考資料">5. 參考資料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.docker.com/compose/" target="_blank" rel="noopener"
>Docker Compose 官方文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.docker.com/" target="_blank" rel="noopener"
>Docker 官方網站&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://dandelionlibra.github.io/post/virtual-environment/docker/setup-jupyter-notebook-with-docker/" target="_blank" rel="noopener"
>如何安裝 Docker（延伸閱讀）&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docker 基本使用指令</title><link>https://Dandelionlibra.github.io/post/virtual-environment/docker/docker/</link><pubDate>Thu, 10 Jul 2025 10:00:00 +0000</pubDate><guid>https://Dandelionlibra.github.io/post/virtual-environment/docker/docker/</guid><description>&lt;h2 id="內容大綱">內容大綱
&lt;/h2>&lt;ol>
&lt;li>Docker 是什麼？&lt;/li>
&lt;li>Docker 常用指令與參數說明&lt;/li>
&lt;li>Docker 實用操作範例&lt;/li>
&lt;li>參考資料&lt;/li>
&lt;/ol>
&lt;h2 id="1-docker-是什麼">1. Docker 是什麼？
&lt;/h2>&lt;p>Docker 是一套開源的容器化平台，讓開發者能夠將應用程式及其依賴環境打包成一個輕量級、可攜帶的容器（Container）。這些容器可以在任何支援 Docker 的作業系統上快速部署與執行，解決「在我電腦可以跑」的問題，提升開發、測試與部署的效率。&lt;/p>
&lt;hr>
&lt;h2 id="2-docker-常用指令與參數說明">2. Docker 常用指令與參數說明
&lt;/h2>&lt;p>以下介紹幾個 Docker 常用指令及其重要參數：&lt;/p>
&lt;h3 id="啟動容器">啟動容器
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run &lt;span style="color:#f92672">[&lt;/span>OPTIONS&lt;span style="color:#f92672">]&lt;/span> IMAGE &lt;span style="color:#f92672">[&lt;/span>COMMAND&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>ARG...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="常用參數">常用參數
&lt;/h3>&lt;ul>
&lt;li>&lt;code>-d, --detach&lt;/code>：在背景執行容器。&lt;/li>
&lt;li>&lt;code>--detach-keys&lt;/code>：自訂分離容器的鍵組合。&lt;/li>
&lt;li>&lt;code>-e, --env&lt;/code>：設定環境變數。&lt;/li>
&lt;li>&lt;code>--env-file&lt;/code>：從檔案讀取環境變數。&lt;/li>
&lt;li>&lt;code>-i, --interactive&lt;/code>：保持標準輸入開啟（互動模式）。&lt;/li>
&lt;li>&lt;code>-t, --tty&lt;/code>：分配一個虛擬終端機。&lt;/li>
&lt;li>&lt;code>--privileged&lt;/code>：給予容器額外的權限。&lt;/li>
&lt;li>&lt;code>-u, --user&lt;/code>：以指定使用者身份執行容器。&lt;/li>
&lt;li>&lt;code>-w, --workdir&lt;/code>：指定容器內的工作目錄。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-docker-實用操作範例">3. Docker 實用操作範例
&lt;/h2>&lt;h3 id="以互動模式啟動-ubuntu-容器">以互動模式啟動 Ubuntu 容器
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -it ubuntu:latest /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-i&lt;/code> 保持標準輸入開啟，&lt;code>-t&lt;/code> 分配終端機，方便互動操作。&lt;/li>
&lt;/ul>
&lt;h3 id="在背景執行-nginx-容器">在背景執行 Nginx 容器
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d -p 8080:80 nginx:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-d&lt;/code> 讓容器在背景執行，&lt;code>-p&lt;/code> 對應主機與容器的埠口。&lt;/li>
&lt;/ul>
&lt;h3 id="設定環境變數並指定工作目錄">設定環境變數並指定工作目錄
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -e ENV_VAR&lt;span style="color:#f92672">=&lt;/span>value -w /app -it python:3.10 bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-e&lt;/code> 設定環境變數，&lt;code>-w&lt;/code> 指定工作目錄。&lt;/li>
&lt;/ul>
&lt;h3 id="以指定使用者執行">以指定使用者執行
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -u 1000:1000 -it ubuntu bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-u&lt;/code> 指定使用者與群組 ID。&lt;/li>
&lt;/ul>
&lt;h3 id="從檔案讀取環境變數">從檔案讀取環境變數
&lt;/h3>&lt;p>假設有 &lt;code>.env&lt;/code> 檔案：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --env-file .env ubuntu env
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="4-參考資料">4. 參考資料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.docker.com/" target="_blank" rel="noopener"
>Docker 官方文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener"
>Docker 指令參考&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://hub.docker.com/" target="_blank" rel="noopener"
>Docker Hub&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://dandelionlibra.github.io/post/virtual-environment/docker/setup-jupyter-notebook-with-docker/" target="_blank" rel="noopener"
>Docker 安裝教學（延伸閱讀）&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>